@using Microsoft.JSInterop
@using BlazorWasmJsLib.Core
@inject IJSRuntime JS
@inject ILogger<App> _logger
@inject DemoService _service;

BlazorWasmJsLib - App Carregado

@code {
    private DotNetObjectReference<App>? _objRef;

    protected override void OnInitialized()
    {
        _logger.LogDebug("OnInitialized");
        _objRef = DotNetObjectReference.Create(this);
        CallJsRazorStarted();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        _logger.LogDebug($"OnAfterRenderAsync firstRender={firstRender}");
        return Task.CompletedTask;
    }

    private void CallJsRazorStarted()
    {
        @*
            https://docs.microsoft.com/pt-br/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-6.0
            jsInProcess: Interoperabilidade síncrona JS em Blazor WebAssembly
        *@
        var jsInProcess = (IJSInProcessRuntime)JS;
        jsInProcess.InvokeVoid("__BlazorWasmJsLibStarted", _objRef);
    }

    [JSInvokable]
    public async Task<int> MyDotnetFuncAsync()
    {
        _logger.LogInformation("chamou MyDotnetFuncAsync, aguardando 2s");
        await Task.Delay(2000);
        _logger.LogInformation("chamou MyDotnetFuncAsync ok");
        return 5;
    }

    [JSInvokable]
    public int MyDotnetFunc2()
    {
        _logger.LogInformation("chamou MyDotnetFunc2");
        return 4;
    }

    [JSInvokable]
    public Task<WeatherForecast[]?> GetWeather() => _service.GetWeather();
}